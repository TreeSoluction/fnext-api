generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  password           String
  email              String            @unique
  verify             Boolean           @default(false)
  Investor           Investor[]
  Startup            Startup[]
  ConfirmationCode   ConfirmationCode? @relation(fields: [confirmationCodeId], references: [id])
  confirmationCodeId Int?
}

model Investor {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String
  birth_date DateTime @db.Date
  cpf        String?
  created_at DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Startup {
  id                  Int               @id @default(autoincrement())
  name                String
  phone               String
  birth_date          DateTime          @db.Date
  cnpj                String
  created_at          DateTime          @default(now())
  User                User              @relation(fields: [userId], references: [id])
  userId              Int
  completeRegister    Boolean?
  haveAPlan           Boolean?
  minimumInvestment   Float?
  returnValue         Float?
  monthlyBilling      Float?
  brazilUnits         Float?
  royalty             Float?
  companyHeadquarters String?
  observationNotes    String?
  ModelOfBusiness     ModelOfBusiness[]
}

model ModelOfBusiness {
  id                     Int     @id @default(autoincrement())
  name                   String
  capitalForInstallation Float
  franchiseFee           Float
  workingCapital         Float
  Startup                Startup @relation(fields: [startupId], references: [id])
  startupId              Int
}

model ConfirmationCode {
  id          Int      @id @default(autoincrement())
  code        String
  creation_at DateTime @default(now())
  User        User[]
}
